minikube start
minikube stop

minikube service service_name -> Assign a external/public IP adress to a Kubernetes external Service

kubectl create deployment DEPLOYMENT_NAME --image=image [--dry-run] [options]
kubectl create deployment nginx-depl --image=nginx
kubetcl delete deployment deployment_name

kubectl get all
kubectl get pod
kubectl get deployment
kubectl get replicaset

Deployment -> Replicaset -> Pod -> Container
You only control deployments, kubernetes handles everything else below Deployment level

kubectl edit deployment deployment_name

DEBUGGING TOOLS

kubectl logs pod_name
kubectl describe pod/service pod_name -> status and state changes of a pod 
kubectl logs pod_name -> POD_LOGS
kubetc exec -it pod_name -- bin/bash (Run terminal in mongo shell)

CONFIGURATION FILE
kubectl apply -f config-file.yaml [Create or update deployments using configuration file]

Configuration file has three main parts
1. Metadata
2. Specification
3. Status -> This is automatically generated by kubernetes. This is used by kubernetes to check if current status is same as expected/specified status. If they dont match then Kubernetes will restart/recreate the pod automatically which is a part of the self healing feature that Kubernetes provides. Current state is obtained from the `etcd` file which is present in the master server/machine which holds all the metadata about all the worker nodes\

Labels and Selectors 
Metadata Part contains the lables
Specification part contins the Selectors

THey are used to match each port to their above parents (Like deployments) or deployments to their services

PORTS
Service has a PORT which should match the port assigned to then pod. it will receive requests and then redirect them to the specific pod whose name has been mentioned in the service 

`DEPLOYMENT CONFIG FILE`
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec: # Deployment Options
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec: # Pod Options
      containers:
      - name: nginx
        image: nginx:1.16
        ports:
        - containerPort: 8080

`SERVICE CONFIG FILE`
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

Check if service `targetPort` is correctly mapped to the required pod
1. Get IP of the pod -> `kubectl get pod -o wide`
2. Check if the service points to the correct IP -> `kubectl descibe servive_name`

Get the status which kubernetes had automatically generated
`kubectl get deployment deployment_name -o yaml`